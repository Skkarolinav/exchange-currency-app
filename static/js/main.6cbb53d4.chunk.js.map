{"version":3,"sources":["components/amount/Amount.js","components/selector/Selector.js","components/rate/Rate.js","components/date/Date.js","App.js","serviceWorker.js","index.js"],"names":["Amount","props","react_default","a","createElement","Fragment","className","htmlFor","label","type","name","id","value","amount","onChange","handleChangeAmount","disabled","convertFrom","Selector","handleChangeConvertFrom","currencies","map","currency","key","code","Rate","rate","toFixed","convertTo","Date","date","App","state","result","calculateCurrency","fetch","concat","_this","then","res","json","data","rates","setState","e","target","handleChangeConvertTo","swap","selector_Selector","this","amount_Amount","rate_Rate","date_Date","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6cbb53d4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Amount = (props) => {\r\n    return(\r\n      <>\r\n      <div className=\"form-group\">\r\n        <div className=\"col\">\r\n          <label htmlFor=\"panel\">{props.label}</label>\r\n        </div>\r\n        <div className=\"input-group\">\r\n          <input className=\"form-control\" type=\"number\" name=\"\" id=\"panel\" value={props.amount} onChange = {props.handleChangeAmount} disabled={props.disabled}/>\r\n          <div className=\"inut-group-append\">\r\n            <span className =\"input-group-text\" id=\"basic-addon1\">{props.convertFrom}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  export default Amount","import React from 'react';\r\n\r\nconst Selector = (props) => {\r\n    return(\r\n      <>\r\n        <div className=\"form-group\">\r\n          <div className=\"col\">\r\n          <label htmlFor=\"select\">{props.label}</label>\r\n          </div>\r\n          <select id=\"select\" className=\"custom-select\" onChange={props.handleChangeConvertFrom}>\r\n            {props.currencies.map(currency=>(<option key={currency.code} value={currency.code} >{currency.name}</option>))}\r\n          </select>\r\n        </div>\r\n      </>\r\n     )\r\n  }\r\n\r\n  export default Selector","import React from 'react';\r\n\r\nconst Rate = (props) => {\r\n    return(\r\n      <>\r\n        {props.rate ? <p><strong>Exchange Rate:</strong> 1 {props.convertFrom} = {props.rate.toFixed(4)} {props.convertTo}</p> : <p className=\"hiddenElement\">a </p>}\r\n      </>\r\n    )\r\n  }\r\n\r\nexport default Rate","import React from 'react';\r\n\r\nconst Date = (props) => {\r\n    return(\r\n      <>\r\n        {props.date ? <p><strong>Last Updated: </strong>{props.date}</p> : <p className=\"hiddenElement\">a</p>}\r\n      </>\r\n    )\r\n  }\r\n\r\nexport default Date","import React, { Component } from 'react';\nimport './App.css';\n\nimport AmountInput from './components/amount/Amount';\nimport CurrencySelect from './components/selector/Selector';\nimport ExchangeRateInformation from './components/rate/Rate';\nimport TimeInformation from './components/date/Date';\n\nclass App extends Component {\n    \n  state = {\n\n    currencies: [\n      {\n        code: \"AUD\",\n        name: \"Australian dollar\"\n      },\n      {\n        code: \"BRL\",\n        name: \"Brazilian real\"\n      },\n      {\n        code: \"BGN\",\n        name: \"Bulgarian lev\"\n      },\n      {\n        code: \"CAD\",\n        name: \"Canadian dollar\"\n      },\n      {\n        code: \"CNY\",\n        name: \"Chinese yuan renminbi\"\n      },\n      {\n        code: \"HRK\",\n        name: \"Croatian kuna\"\n      },\n      {\n        code: \"CZK\",\n        name: \"Czech koruna\"\n      },\n      {\n        code: \"DKK\",\n        name: \"Danish krone\"\n      },\n      {\n        code: \"EUR\",\n        name: \"European euro\"\n      },\n      {\n        code: \"HKD\",\n        name: \"Hong Kong dollar\"\n      },\n      {\n        code: \"HUF\",\n        name: \"Hungarian forint\"\n      },\n      {\n        code: \"ISK\",\n        name: \"Icelandic krona\"\n      },\n      {\n        code: \"INR\",\n        name: \"Indian rupee\"\n      },\n      {\n        code: \"IDR\",\n        name: \"Indonesian rupiah\"\n      },\n      {\n        code: \"ILS\",\n        name: \"Israeli new shekel\"\n      },\n      {\n        code: \"JPY\",\n        name: \"Japanese yen\"\n      },\n      {\n        code: \"MYR\",\n        name: \"Malysian ringgit\"\n      },\n      {\n        code: \"MXN\",\n        name: \"Mexican peso\"\n      },\n      {\n        code: \"NZD\",\n        name: \"New Zealand dollar\"\n      },\n      {\n        code: \"NOK\",\n        name: \"Norwegian krone\"\n      },\n      {\n        code: \"PHP\",\n        name: \"Philippine peso\"\n      },\n      {\n        code: \"PLN\",\n        name: \"Polish zloty\"\n      },\n      {\n        code: \"GBP\",\n        name: \"Pound sterling\"\n      },\n      {\n        code: \"RON\",\n        name: \"Romanian leu\"\n      },\n      {\n        code: \"RUB\",\n        name: \"Russian ruble\"\n      },\n      {\n        code: \"SGD\",\n        name: \"Singapore dollar\"\n      },\n      {\n        code: \"ZAR\",\n        name: \"South African rand\"\n      },\n      {\n        code: \"KRW\",\n        name: \"South Korean won\"\n      },\n      {\n        code: \"SEK\",\n        name: \"Swedish krona\"\n      },\n      {\n        code: \"CHF\",\n        name: \"Swiss franc\"\n      },\n      {\n        code: \"THB\",\n        name: \"Thai baht\"\n      },\n      {\n        code: \"TRY\",\n        name: \"Turkish lira\"\n      },\n      {\n        code: \"USD\",\n        name: \"United States dollar\"\n      },\n    ],\n\n    convertFrom: \"AUD\",\n    convertTo: \"AUD\",\n    amount: 0,\n    result: 0,\n    date: \"\",\n    rate: 0,\n  }\n\n  calculateCurrency = () => {\n      fetch(`https://api.exchangeratesapi.io/latest?base=${this.state.convertFrom}`)\n      .then(res => res.json())\n      .then(data => {\n          const result = (data.rates[this.state.convertTo] * this.state.amount).toFixed(2)\n          const date = data.date\n          const rate = data.rates[this.state.convertTo]\n          this.setState({\n              result,\n              date: date,\n              rate,\n          })\n      })\n    }\n\n  handleChangeConvertFrom = (e) => {\n    this.setState({\n      convertFrom: e.target.value,\n      },\n    this.calculateCurrency\n    )\n  }\n\n  handleChangeConvertTo = (e) => {\n    this.setState({\n      convertTo: e.target.value\n    },\n    this.calculateCurrency\n    )\n  }\n  \n  handleChangeAmount = (e) => {\n    this.setState({\n      amount: e.target.value\n    },\n    this.calculateCurrency\n    )\n  }\n\n  swap = () => {\n    this.setState({\n      convertFrom: this.state.convertTo,\n      convertTo: this.state.convertFrom,\n    })\n  }\n\n  render() { \n  \n    return (\n      <>\n        <div className = \"container\">\n\n          <div className = \"mycontainer\">\n\n            <h2 className = \"row class1 d-flex justify-content-center\">\n              Exchange Currency Converter\n            </h2>\n          \n            <div className = \"row class2 d-flex justify-content-center\">\n              <div className = \"mycol1 col-sm-7 col-md-4\">\n                <CurrencySelect currencies = {this.state.currencies} label=\"From\" handleChangeConvertFrom = {this.handleChangeConvertFrom}/>\n              </div>\n              <div className = \"mycol2 col-sm-7 col-md-4\">\n                <AmountInput amount = {this.state.amount} convertFrom = {this.state.convertFrom} label=\"Amount\" handleChangeAmount = {this.handleChangeAmount}/> \n              </div>\n            </div>\n\n            <div className = \"row class3 d-flex justify-content-center\">\n              <div className = \"mycol1 col-sm-7 col-md-4\">\n                <CurrencySelect currencies = {this.state.currencies} label=\"To\" handleChangeConvertFrom = {this.handleChangeConvertTo}/>\n              </div>\n              <div className = \"mycol2 col-sm-7 col-md-4\">\n                <AmountInput amount = {this.state.result} convertFrom = {this.state.convertTo} label=\"Exchange\" disabled = {true}/> \n              </div>\n            </div>\n\n            <div className = \"row d-flex justify-content-center\">\n              <ExchangeRateInformation rate={this.state.rate} convertFrom={this.state.convertFrom} convertTo={this.state.convertTo} />\n            </div>\n\n            <div className = \"row d-flex justify-content-center\">\n              <TimeInformation date={this.state.date} />\n            </div>\n\n          </div>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}